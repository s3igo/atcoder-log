{
    "Open Scanf": {
        "prefix": ";scanf",
        "body": [
            "open Scanf"
        ],
        "description": "Open Scanf module"
    },
    "Open Poly": {
        "prefix": ";poly",
        "body": [
            "open Poly"
        ],
        "description": "Open Poly module"
    },
    "Read line": {
        "prefix": ";read_line",
        "body": [
            "let read_line () = In_channel.(input_line_exn stdin)"
        ],
        "description": "Read a line from stdin"
    },
    "Read lines": {
        "prefix": ";read_lines",
        "body": [
            "let read_lines () = In_channel.(input_lines stdin)"
        ],
        "description": "Read lines from stdin"
    },
    "Xor": {
        "prefix": ";xor",
        "body": [
            "let xor a b = (a && not b) || (not a && b)"
        ],
        "description": "XOR operator"
    },
    "Compose": {
        "prefix": ";compose",
        "body": [
            "let ( >> ) f g x = g (f x)"
        ],
        "description": "Compose two functions"
    },
    "Cond": {
        "prefix": ";cond",
        "body": [
            "let cond b = if b then \"Yes\" else \"No\""
        ],
        "description": "Conditional string"
    },
    "Contains": {
        "prefix": ";contains",
        "body": [
            "let contains ~l ~r x = l <= x && x <= r"
        ],
        "description": "Check if a number is in a range"
    },
    "Diff": {
        "prefix": ";diff",
        "body": [
            "let diff (x, y) (x', y') = Int.(((x - x') ** 2) + ((y - y') ** 2))"
        ],
        "description": "Calculate the difference between two points"
    },
    "String to Int list": {
        "prefix": ";string_to_int_list",
        "body": [
            "let string_to_int_list = String.split ~on:' ' >> List.map ~f:int_of_string"
        ],
        "description": "Convert a string to a list of integers"
    },
    "Int List to String": {
        "prefix": ";int_list_to_string",
        "body": [
            "let int_list_to_string = List.map ~f:string_of_int >> String.concat ~sep:\" \""
        ],
        "description": "Convert a list of integers to a string"
    },
    "List to Tuple2": {
        "prefix": ";list_to_tuple2",
        "body": [
            "let list_to_tuple2 = function [a; b] -> (a, b) | _ -> assert false"
        ],
        "description": "Convert a list to a Tuple2"
    },
    "List to Tuple3": {
        "prefix": ";list_to_tuple3",
        "body": [
            "let list_to_tuple3 = function [a; b; c] -> (a, b, c) | _ -> assert false"
        ],
        "description": "Convert a list to a Tuple3"
    },
    "Position2": {
        "prefix": ";position2",
        "body": [
            "let position2 ~f a b =",
            "  List.(zip_exn a b |> findi ~f:(fun _ (x, y) -> f x y)) |> Option.map ~f:fst"
        ],
        "description": "Find the position of the first pair that satisfies a predicate"
    },
    "Encode": {
        "prefix": ";encode",
        "body": [
            "let encode l = List.(group l ~break:Poly.( <> ) >>| fun l -> (length l, hd_exn l))"
        ],
        "description": "Run-length encoding of a list"
    },
    "Split first": {
        "prefix": ";split_first",
        "body": [
           "let split_first = function [] -> None | h :: t -> Some (h, t)"
        ],
        "description": "Split the first element of a list"
    },
    "Windows": {
        "prefix": ";windows",
        "body": [
            "let windows l =",
            "  let rec aux acc = function a :: (b :: _ as t) -> aux ((a, b) :: acc) t | _ -> List.rev acc in",
            "  aux [] l"
        ],
        "description": "Generate a list of adjacent pairs"
    },
    "Zipi": {
        "prefix": ";zipi",
        "body": [
            "let zipi l = l |> List.(zip_exn (init (length l) ~f:Fn.id))"
        ],
        "description": "Zip a list with its index"
    },
    "Split2": {
        "prefix": ";split2",
        "body": [
            "let split2 ~l ~r lst =",
            "  let prefix, suffix = List.split_n lst l in",
            "  let body, suffix = List.split_n suffix (r - l) in",
            "  (prefix, body, suffix)"
        ],
        "description": "Split a list into three parts"
    },
    "Power set": {
        "prefix": ";power_set",
        "body": [
            "let power_set l =",
            "  let rec aux acc = function",
            "    | [] -> acc",
            "    | h :: t -> aux (acc |> List.fold ~init:[] ~f:(fun acc x -> (h :: x) :: x :: acc)) t",
            "  in",
            "  aux [[]] l"
        ],
        "description": "Generate the power set of a list"
    },
    "All substrings": {
        "prefix": ";all_substrs",
        "body": [
            "let all_substrs s =",
            "  let n = String.length s in",
            "  let rec aux i acc =",
            "    if i >= n then acc",
            "    else",
            "      let rec inner j acc' =",
            "        if j > n then acc' else inner (j + 1) (Stdlib.String.sub s i (j - i) :: acc')",
            "      in",
            "      aux (i + 1) (inner (i + 1) acc)",
            "  in",
            "  aux 0 []"
        ],
        "description": "Generate all substrings of a string"
    },
    "Ceiling division": {
        "prefix": ";ceil_div",
        "body": [
            "let ceil_div x y =",
            "  if x + y - 1 < 0 && (x + y - 1) % y <> 0 then ((x + y - 1) / y) - 1 else (x + y - 1) / y"
        ],
        "description": "Ceiling division"
    },
    "Count": {
        "prefix": ";count",
        "body": [
            "let count =",
            "  List.fold ~init:Char.Map.empty ~f:(fun acc x ->",
            "      Map.update acc x ~f:(function None -> 1 | Some cnt -> cnt + 1))"
        ],
        "description": "Count the occurrences of each element in a list"
    },
    "Flat matrix": {
        "prefix": ";flat_matrix",
        "body": [
            "let flat_matrix m =",
            "  let rows, cols, sub_rows, sub_cols =",
            "    Array.(length m, length m.(0), length m.(0).(0), length m.(0).(0).(0))",
            "  in",
            "  Iter.(0 -- (rows - 1) >>= fun i ->",
            "    0 -- (sub_rows - 1) >>= fun j ->",
            "    0 -- (cols - 1) >>= fun k -> return m.(i).(k).(j))",
            "  |> Iter.to_list |> Array.concat |> Array.to_list",
            "  |> List.chunks_of ~length:(sub_cols * cols)",
            "  |> List.map ~f:List.to_array |> List.to_array"
        ],
        "description": "Flatten a 4D array into a 2D array"
    }
}
